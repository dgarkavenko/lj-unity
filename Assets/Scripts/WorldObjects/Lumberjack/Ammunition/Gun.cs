//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18331
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;

public class Gun : Weapon
{

	public GunData gd;
	public float recoil;
	public float nextShot;
    public int currentFrame = 0;
	
    public delegate int AmmoDelegate(GunData.EAmmo ammo, int max, bool withdraw);

    public AmmoDelegate ReloadDelegate;
    public event Action OnShot;
    public event Action<bool> OnReload;
    

    void Start()
    {
    }

	void Reload ()
	{
        if (IsReloading) return;

        if (ReloadDelegate != null && ReloadDelegate(gd.ammoType, 1, false) > 0){
            gd.reload_time_left = gd.reload_time;
            if (OnReload != null) OnReload(true);
        }   
        else
            Debug.Log("No ammo");        

	}


    void LateUpdate()
    {
        BruteRotation(Mathf.Abs(Rad180(dirPolar)));
    }


    float dirPolar;


    void Reloading()
    {
        gd.reload_time_left -= Time.deltaTime;
        if (gd.reload_time_left <= 0)
        {
            gd.ammo_current = ReloadDelegate(gd.ammoType, gd.ammo_max, true);
            if (OnReload != null) OnReload(false);
        }
            

   }

	void Update(){

        dirPolar = Mathf.Atan2(Input.mousePosition.y - Lumberjack.PivotScreenPosition.y, Input.mousePosition.x - Lumberjack.PivotScreenPosition.x);

		//Recoil reduction
		if (recoil > 0) {
			recoil -= gd.recoilReduction;		
		}

		//Force Reload
		if (Input.GetKeyDown (KeyCode.R)) {
			if (!FullAmmo) Reload();
		}

		//Reloading process
		//TODO add shotgun style relaoding
		if (gd.reload_time_left > 0) Reloading();		

		//LMB Pressed or JustPressed
		if (!Input.GetMouseButton (0) && !Input.GetMouseButtonDown (0))
			return;

		//Shooting
		if (gd.mode == GunData.EMode.auto) {
			if (!IsReloading){
				if (IsReady){
                    Shot();
				}
			}else{
				//AmmunitionWithin
			}
		} else {
			if (!Input.GetMouseButtonDown(0)) return;
			if (!IsReloading){
				if (IsReady){
                    Shot();
				}
			}else{
				//AmmunitionWithin
			}
		}
    }

	RaycastHit2D hit;

    private Vector2 origin;

	void Shot ()
	{

        if (IsReloading || !IsReady) return;

        if (!HasAmmo)
        {   
            Reload();
            return;
        }

        nextShot = Time.time + 60 / gd.rate;

		gd.ammo_current--;
        if (OnShot != null) OnShot();

		origin = Lumberjack.PivotPosition + new Vector2(gd.gunpoints[currentFrame].x * Lumberjack.ViewDirection, gd.gunpoints[currentFrame].y);



		var dirPolarWDispersion = dirPolar + (gd.dispersion + recoil) * UnityEngine.Random.Range(-1f, 1f);
		Vector2 dir = new Vector2(Mathf.Cos(dirPolarWDispersion), Mathf.Sin(dirPolarWDispersion));

        hit = Physics2D.Raycast(Lumberjack.PivotPosition, dir, RayCastDistance, LayerMask.GetMask("Zombies"));


		var hitPoint = origin + dir*100;

        if (hit.collider != null)
        {
			var IR = hit.collider.gameObject.GetComponent<Interactive>();
			if (IR != null){
				IR.Interact(new GunShotAction{
					power = UnityEngine.Random.Range(gd.damage_min, gd.damage_max),
					point = hit.point,
                    direction = Lumberjack.ViewDirection,
					force = gd.force});
			}

	        hitPoint = hit.point;
        }

		VFX.Instance.Effects[0].Play(origin, -dirPolar, GunpointPosition);
	}

	public Vector2 GunpointPosition()
	{
		return Lumberjack.PivotPosition + new Vector2(gd.gunpoints[currentFrame].x * Lumberjack.ViewDirection, gd.gunpoints[currentFrame].y);
	}


    public override void Init()
    {
        base.Init();
        if (!HasAmmo) Reload();
    }

    public override void Kill()
    {
        base.Kill();
        gd.reload_time_left = 0;        
    }

    public override T GetData<T>()
    {
        return gd as T;
    }

	public bool IsReloading{
		get { return gd.reload_time_left > 0; }
	}

	public bool IsReady{
		get { return nextShot <= Time.time; }
	}

    public bool HasAmmo
    {
        get { return gd.ammo_current > 0;}
    }

    public bool FullAmmo
    {
        get { return gd.ammo_current >= gd.ammo_max; }
    }

	override public void SetWeapon(WeaponData wd){
		gd = wd as GunData;
	}

    private float Rad180(float radian)
    {
        float degree = 90f + radian * Mathf.Rad2Deg;
        return degree > 180 ? degree - 360 : degree;
    }

    public void BruteRotation(float degree)
    {
        if (degree < 7.5)
        {
            currentFrame = 12;
        }
        else if (degree < 22.5)
        {
            currentFrame = 11;
        }
        else if (degree < 37.5)
        {
            currentFrame = 10;
        }
        else if (degree < 52.5)
        {
            currentFrame = 9;
        }
        else if (degree < 67.5)
        {
            currentFrame = 8;
        }
        else if (degree < 85.5)
        {//83.5
            currentFrame = 7;
        }
        else if (degree < 98.5)
        {//97.5
            currentFrame = 6;
        }
        else if (degree < 112.5)
        {
            currentFrame = 5;
        }
        else if (degree < 127.5)
        {
            currentFrame = 4;
        }
        else if (degree < 142.5)
        {
            currentFrame = 3;
        }
        else if (degree < 157.5)
        {
            currentFrame = 2;
        }
        else if (degree < 172.5)
        {
            currentFrame = 1;
        }
        else
            currentFrame = 0;

        Renderer.sprite = gd.frames[currentFrame];
    }
}


