//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18331
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;

public class Gun : Weapon
{

	public GunData gd;

	public float recoil;
	public float cooldown;

	public Gun ()
	{
		relatedTypes = DeadlyThings.ANY_GUN;
		rayCastDistance = 100;
	}

	void Reload ()
	{
		throw new NotImplementedException ();
	}

	override public void ManualUpdate(Vector2 pivotScreenPosition, Vector2 pivotPosition){
		//Recoil reduction
		if (recoil > 0) {
			recoil -= gd.recoilReduction;		
		}

		//Force Reload
		if (Input.GetKeyDown (KeyCode.R)) {
			if (gd.ammo_current < gd.ammo_max) Reload();
		}

		//Reloading process
		//TODO add shotgun style relaoding
		if (gd.reload_time_left > 0) {
			gd.reload_time_left -= Time.deltaTime;
			if (gd.reload_time_left <= 0){
				gd.ammo_current = gd.ammo_max;
			}
		}

		//Cooldown
		if (cooldown > 0) {
			cooldown-= Time.deltaTime;
		}

		//LMB Pressed or JustPressed
		if (!Input.GetMouseButton (0) && !Input.GetMouseButtonDown (0))
			return;

		//Shooting
		if (gd.mode == GunData.Mode.auto) {
			if (IsReloaded){
				if (IsReady){
					Shot(pivotScreenPosition, pivotPosition);
				}
			}else{
				//AmmunitionWithin
			}
		} else {
			if (!Input.GetMouseButtonDown(0)) return;
			if (IsReloaded){
				if (IsReady){
					Shot(pivotScreenPosition, pivotPosition);
				}
			}else{
				//AmmunitionWithin
			}
		}


	}

	RaycastHit2D hit;

	void Shot (Vector2 pivotScreenPosition, Vector2 pivotPosition)
	{
		Debug.Log ("SHOT");

		cooldown = 60 / gd.rate;
		if (gd.reload_time_left <= 0)
			gd.ammo_current--;
		else
		{
			//WarriorWithin damage 2 lj
		}

		//TODO VFX

		float dirPolar = (float)Math.Atan2(Input.mousePosition.y - pivotScreenPosition.y, Input.mousePosition.x - pivotScreenPosition.x);
		dirPolar += (gd.dispersion + recoil) * UnityEngine.Random.Range(-1f, 1f);


		hit = Physics2D.Raycast(pivotPosition, new Vector2(Mathf.Cos(dirPolar), Mathf.Sin(dirPolar)), rayCastDistance, LayerMask.GetMask("Zombies", "Trees"));
		if (hit.collider != null) {
			Debug.Log("HIT THIS MOTHER FUCKER");
			hit.collider.rigidbody2D.AddForce(new Vector2(Mathf.Cos(dirPolar), Mathf.Sin(dirPolar)) * 220);
		}
	}

	void Test(Vector2 v){
		Debug.Log (v);
	}

	public bool IsReloaded{
		get { return gd.reload_time_left <= 0; }
	}

	public bool IsReady{
		get { return cooldown <= 0; }
	}

	override public void SetWeapon(WeaponData wd){
		gd = wd as GunData;
	}
}


